// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: user.sql

package db

import (
	"context"
)

const createAddress = `-- name: CreateAddress :one
INSERT INTO address (
unit_number,
address_line1,
address_line2,
postal_code
) VALUES(
    $1, $2, $3, $4
) RETURNING id, unit_number, address_line1, address_line2, postal_code
`

type CreateAddressParams struct {
	UnitNumber   string `json:"unit_number"`
	AddressLine1 string `json:"address_line1"`
	AddressLine2 string `json:"address_line2"`
	PostalCode   int32  `json:"postal_code"`
}

func (q *Queries) CreateAddress(ctx context.Context, arg CreateAddressParams) (Address, error) {
	row := q.db.QueryRowContext(ctx, createAddress,
		arg.UnitNumber,
		arg.AddressLine1,
		arg.AddressLine2,
		arg.PostalCode,
	)
	var i Address
	err := row.Scan(
		&i.ID,
		&i.UnitNumber,
		&i.AddressLine1,
		&i.AddressLine2,
		&i.PostalCode,
	)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO user_details (
first_name,
last_name,
user_name,
email,
mobile
) VALUES(
    $1, $2, $3, $4, $5
) RETURNING id, first_name, last_name, user_name, email, mobile, created_at
`

type CreateUserParams struct {
	FirstName string `json:"first_name"`
	LastName  string `json:"last_name"`
	UserName  string `json:"user_name"`
	Email     string `json:"email"`
	Mobile    int32  `json:"mobile"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (UserDetail, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.FirstName,
		arg.LastName,
		arg.UserName,
		arg.Email,
		arg.Mobile,
	)
	var i UserDetail
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.UserName,
		&i.Email,
		&i.Mobile,
		&i.CreatedAt,
	)
	return i, err
}
